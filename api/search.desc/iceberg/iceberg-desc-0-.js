searchState.loadedDescShard("iceberg", 0, "Apache Iceberg Official Native Rust Implementation\nAdd a new schema to the table\nAdd snapshot to table.\nAdd sort order to table.\nAdd a new partition spec to the table\nAssign a new UUID to the table\nThe catalog API for Iceberg Rust.\nThe table’s current schema id must match the requirement.\nIceberg data is invalid.\nThe table’s default sort order id must match the …\nThe table’s default spec id must match the requirement.\nContains the error value\nError is the error struct returned by all iceberg …\nErrorKind is all kinds of Error of iceberg.\nIceberg feature is not supported.\nThe table’s last assigned column id must match the …\nThe table’s last assigned partition id must match the …\nNamespace represents a namespace in the catalog.\nNamespaceIdent represents the identifier of a namespace in …\nThe table must not already exist; used for create …\nContains the success value\nThe table branch or tag identified by the requirement’s …\nRemove table’s properties\nRemove snapshot reference\nRemove table’s snapshots\nResult that is a wrapper of <code>Result&lt;T, iceberg::Error&gt;</code>\nSet table’s current schema\nSet table’s default sort order\nSet table’s default spec\nUpdate table’s location\nUpdate table’s properties\nSet table’s snapshot ref.\nTableCommit represents the commit of a table in the …\nTableCreation represents the creation of a table in the …\nTableIdent represents the identifier of a table in the …\nTableRequirement represents a requirement for a table in …\nTableUpdate represents an update to a table in the catalog.\nIceberg don’t know what happened here, and no actions …\nUpgrade table’s format version\nThe table UUID must match the requirement.\nViewCreation represents the creation of a view in the …\nApplies the update to the table metadata builder.\nConversion between Iceberg and Arrow schema\nCreate a builder for building <code>TableCreation</code>. On the …\nCreate a builder for building <code>TableCommit</code>. On the builder, …\nCreate a builder for building <code>ViewCreation</code>. On the …\nCreate a new namespace inside the catalog.\nCreate a new table inside the namespace.\nDefault catalog to use when a reference in the SELECT does …\nThe default namespace to use when a reference in the …\nDrop a namespace from the catalog.\nDrop a table from the catalog.\nHelper macro to check arguments.\nThis module contains expressions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create namespace identifier from an iterator of …\nTry to create table identifier from an iterator of string.\nCreate a multi-level namespace identifier from vector.\nGet a namespace information from the catalog.\nReturn the table identifier.\nReturns inner strings.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert self into static str.\nFile io implementation.\nReturn error’s kind.\nList namespaces inside the catalog.\nList tables from namespace.\nLoad table from the catalog.\nThe location of the table.\nThe view’s base location; used to create metadata file …\nReturn error’s message.\nGet the name of the namespace.\nGet the name of the table.\nTable name.\nThe name of the table.\nThe name of the view.\nGet the namespace of the table.\nNamespace of the table.\nCheck if namespace exists in catalog.\nCreate a new Error with error kind and message.\nCreate a new namespace identifier with only one level.\nCreate a new namespace.\nCreate a new table identifier.\nGet the parent of this namespace. Returns None if this …\nThe partition spec of the table, could be None.\nGet the properties of the namespace.\nThe properties of the table.\nThe properties of the view.\nRename a table in the catalog.\nRepresentations for the view.\nTable scan api.\nThe schema of the table.\nThe schema of the view.\nThe sort order of the table.\nSpec for Iceberg.\nA string to string map of summary metadata about the …\nTable API for Apache Iceberg\nCheck if a table exists in the catalog.\nTake all requirements.\nTake all updates.\nReturns a string for used in url.\nThis module contains transaction api.\nTransform function used to compute partition values.\nUpdate a namespace inside the catalog.\nUpdate a table to the catalog.\nAdd more context in error.\nCreate a new namespace with properties.\nSet source for error.\nIceberg writer module.\nCurrent schema id of the table to assert.\nDefault sort order id of the table to assert.\nDefault spec id of the table to assert.\nThe last assigned field id of the table to assert.\nLast assigned partition id of the table to assert.\nThe reference of the table to assert.\nThe snapshot id of the table to assert. If the id is <code>None</code>, …\nUuid of original table.\nTarget format upgrade to.\nThe last column id of the table.\nNew location for table.\nName of snapshot reference to set.\nName of snapshot reference to remove.\nSnapshot reference to set.\nProperties to remove\nThe schema to add.\nSchema ID to set as current, or -1 to set last added schema\nSnapshot to add.\nSnapshot ids to remove.\nSort order to add.\nSort order ID to set as the default, or -1 to set last …\nThe partition spec to add.\nPartition spec ID to set as the default, or -1 to set last …\nProperties to update for table.\nThe new UUID to assign.\nReads data from Parquet files\nBuilder to create ArrowReader\nA post order arrow schema visitor.\nReturn type of this visitor on arrow field.\nReturn type of this visitor on arrow schema.\nCalled after struct/list/map field.\nCalled after struct/list/map field.\nCalled after list element.\nCalled after list element.\nCalled after map key.\nCalled after map key.\nCalled after map value.\nCalled after map value.\nConvert Arrow schema to Iceberg schema.\nConvert Arrow type to iceberg type.\nCalled before struct/list/map field.\nCalled before struct/list/map field.\nCalled before list element.\nCalled before list element.\nCalled before map key.\nCalled before map key.\nCalled before map value.\nCalled before map value.\nBuild the ArrowReader.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled after list fields visited.\nCalled after map’s key and value fields visited.\nCalled when see a primitive type.\nTake a stream of FileScanTasks and reads all the files. …\nCalled after schema’s type visited.\nConvert iceberg schema to an arrow schema.\nCalled after struct’s fields visited.\nConvert iceberg type to an arrow type.\nSets the desired size of batches in the response to …\nSets the max number of in flight data files that are being …\nDetermines whether to enable row group filtering.\nDetermines whether to enable row selection.\nAlwaysFalse predicate, for example, <code>FALSE</code>.\nAn expression always evaluates to false.\nAlwaysTrue predicate, for example, <code>TRUE</code>.\nAn expression always evaluates to true.\nAnd predicate, for example, <code>a &gt; 10 AND b &lt; 20</code>.\nAn expression combined by <code>AND</code>, for example, …\nBinary expression, for example, <code>a &gt; 10</code>.\nBinary expression, for example, <code>a &gt; 10</code>.\nBinary predicate, for example, <code>a &gt; 10</code>.\nBind expression to a schema.\nThe type of the bound result.\nBound predicate expression after binding to a schema.\nA named reference in a bound expression after binding to a …\nBound term after binding to a schema.\nLogical expression, such as <code>AND</code>, <code>OR</code>, <code>NOT</code>.\nNot predicate, for example, <code>NOT (a &gt; 10)</code>.\nAn expression combined by <code>NOT</code>, for example, <code>NOT (a &gt; 10)</code>.\nOr predicate, for example, <code>a &gt; 10 OR b &lt; 20</code>.\nAn expression combined by <code>OR</code>, for example, <code>a &gt; 10 OR b &lt; 20</code>…\nUnbound predicate expression before binding to a schema.\nPredicate operators used in expressions.\nA named reference in an unbound expression. For example, <code>a</code> …\nSet predicates, for example, <code>a in (1, 2, 3)</code>.\nSet predicates, for example, <code>a IN (1, 2, 3)</code>.\nSet predicates, for example, <code>a in (1, 2, 3)</code>.\nUnbound term before binding to a schema.\nUnary expression, for example, <code>a IS NULL</code>.\nUnary expression, for example, <code>a IS NULL</code>.\nUnary predicate, for example, <code>a IS NULL</code>.\nGet this BoundReference’s Accessor\nCombines two predicates with <code>AND</code>.\nBind an expression to a schema.\nCreates an equal-to expression. For example, <code>a = 10</code>.\nReturn the field of this reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an greater than expression. For example, <code>a &gt; 10</code>.\nCreates a greater-than-or-equal-to than expression. For …\nReturn inputs of this logical expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this operator is binary operator.\nCreates an is-in expression. For example, <code>a IS IN (5, 6)</code>.\nCreates an is-nan expression. For example, <code>a IS NAN</code>.\nCreates an is-not-in expression. For example, …\nCreates an is-not-nan expression. For example, <code>a IS NOT NAN</code>…\nCreates an is-not-null expression. For example, …\nCreates an is-null expression. For example, <code>a IS NULL</code>.\nCheck if this operator is set operator.\nCheck if this operator is unary operator.\nCreates an less than expression. For example, <code>a &lt; 10</code>.\nCreates an less than or equal to expression. For example, …\nReturn the name of this reference.\nReturns a predicate representing the negation (‘NOT’) …\nReturns the predicate that is the inverse of self\nCreate a new unbound reference.\nCreates a new bound reference.\nCreates a unary expression with the given operator and …\nCreates a binary expression with the given operator, term …\nCreate a predicate which is the reverse of this predicate. …\nCreates a not equal-to expression. For example, <code>a!= 10</code>.\nCreates a not start-with expression. For example, …\nCombines two predicates with <code>OR</code>.\nSimplifies the expression by removing <code>NOT</code> predicates, …\nCreates a start-with expression. For example, …\nRegion to use for the S3 client.\nFileIO implementation, used to manipulate files in …\nBuilder for <code>FileIO</code>.\nThe struct the represents the metadata of a file.\nTrait for reading file.\nTrait for writing file.\nGoogle Cloud Storage credentials JSON string, base64 …\nAllow unauthenticated requests\nGoogle Cloud Project ID\nGoogle Cloud Storage endpoint\nGoogle Cloud Storage token\nGoogle Cloud user project\nInput file is used for reading from files.\nOutput file is used for writing to files..\nS3 access key id.\nIf set, all AWS clients will assume a role of the given …\nOptional external ID used to assume an IAM role.\nOptional session name used to assume an IAM role.\nFollowing are arguments for s3 file io. S3 endpoint.\nS3 Path Style Access.\nS3 region.\nS3 secret access key.\nS3 session token. This is required when using temporary …\nS3 Server Side Encryption Key. If S3 encryption type is …\nS3 Server Side Encryption MD5.\nS3 Server Side Encryption Type.\nBuilds <code>FileIO</code>.\nClose file.\nDeletes file.\nCheck file exists.\nCheck if file exists.\nChecks if file exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to infer file io scheme from path. See <code>FileIO</code> for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAbsolute path to root uri.\nRelative path to root uri.\nFetch and returns metadata of file.\nCreates a new builder with scheme. See <code>FileIO</code> for …\nCreates a new builder for local file io.\nCreates input file.\nCreates output file.\nRead file content with given range.\nRead and returns whole content of file.\nCreates <code>FileRead</code> for continues reading.\nRemove the path and all nested dirs and files recursively.\nThe size of the file.\nConverts into <code>InputFile</code>.\nAdd argument for operator.\nAdd argument for operator.\nWrite bytes to file.\nCreate a new output file with given bytes.\nCreates output file for continues writing.\nA stream of arrow <code>RecordBatch</code>es.\nA task to scan part of file.\nA stream of <code>FileScanTask</code>.\nTable scan.\nBuilder to create table scan.\nBuild the table scan.\nReturns a reference to the column names of the table scan.\nThe content type of the file to scan.\nThe format of the file to scan.\nReturns the data file path of this file scan task.\nThe data file path corresponding to the task.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of the file to scan.\nReturns a stream of <code>FileScanTask</code>s.\nReturns the predicate of this file scan task.\nThe predicate to filter.\nReturns the project field id of this file scan task.\nThe field ids to project.\nThe number of records in the file to scan.\nReturns the schema of this file scan task as a reference\nThe schema of the file to scan.\nReturns the schema of this file scan task as a SchemaRef\nSelect some columns of the table.\nSelect all columns.\nSelect empty columns.\nReturns a reference to the snapshot of the table scan.\nSet the snapshot to scan. When not set, it uses current …\nThe start offset of the file to scan.\nReturns an <code>ArrowRecordBatchStream</code>.\nSets the desired size of batches in the response to …\nSets the scan’s case sensitivity\nSets the concurrency limit for both manifest files and …\nSets the data file concurrency limit for this scan\nSpecifies a predicate to use as a filter\nSets the manifest entry concurrency limit for this scan\nDetermines whether to enable row group filtering. When …\nDetermines whether to enable row selection. When enabled, …\nValue: 1\nOnly data files were added and no files were removed.\nAscending\nAvro file format: https://avro.apache.org/\nArbitrary-length byte array.\nBinary value (without length)\nTrue or False\n0x00 for false, non-zero byte for true\nPartition spec that defines how to produce a tuple of …\nReference to <code>BoundPartitionSpec</code>.\nBranches are mutable named references that can be updated …\nHash of value, mod <code>N</code>.\nvalue: 0\nThe manifest content is data.\nType of content stored by the data file: data, equality …\nData file carries data file path, partition tuple, …\nBuilder for <code>DataFile</code>.\nError type for DataFileBuilder\nFormat of this data.\nCalendar date without timezone or time.\nLiteral associated with its type. The value and type pair …\nExtract a date or timestamp day, as days from 1970-01-01\nFixed point decimal\nData files were removed and their contents logically …\nValue: 2\nThe manifest content is deletes.\nDescending\n64-bit IEEE 754 floating point.\nStored as 8-byte little-endian\nvalue: 2\nValue: 0\nField summary for partition field in the spec.\nNulls are stored first\nFixed length byte array\n32-bit IEEE 754 floating point.\nStored as 4-byte little-endian\nIceberg format version\nExtract a timestamp hour, as hours from 1970-01-01 00:00:00\nSource value, unmodified\n32-bit signed integer\nStored as 4-byte little-endian\nStored as 16-byte little-endian\nNulls are stored last\nList type.\nA list is a collection of values with some element type. …\nA list is a collection of values with some element type. …\nValues present in iceberg type\n64-bit signed integer\nStored as 8-byte little-endian\nThe ref name of the main branch of the table.\nA manifest contains metadata and a list of entries.\nThe type of files tracked by the manifest, either data or …\nA manifest is an immutable Avro file that lists data files …\nReference to <code>ManifestEntry</code>.\nEntry in a manifest list.\nSnapshots are embedded in table metadata, but the list of …\nA manifest list writer.\nMeta data of a manifest that is stored in the key-value …\nUsed to track additions and deletions in ManifestEntry.\nA manifest writer.\nMap is a collection of key-value pairs with a key type and …\nMap type\nA map is a collection of key-value pairs with a key type …\nA map is a collection of key-value pairs with a key type …\nEncodes changes to the previous metadata files for the …\nExtract a date or timestamp month, as months from …\nA struct is a tuple of typed values. Each field in the …\nReference to nested field.\nDescribes the order of null values when sorted.\nThe operation field is used by some operations, like …\nOrc file format: https://orc.apache.org/\nData and delete files were added and removed in a logical …\nReserved table property for the JSON representation of …\nReserved table property for current snapshot id.\nReserved table property for current snapshot summary.\nReserved table property for current snapshot timestamp.\nReserved table property for the JSON representation of …\nReserved table property for the JSON representation of …\nReserved table property for table format version.\nProperty key for max number of previous versions to keep.\nDefault value for max number of previous versions to keep.\nReserved table property for the total number of snapshots.\nReserved table property for table UUID.\nParquet file format: https://parquet.apache.org/\nPartition fields capture the transform from table data to …\nCreate valid partition specs for a given schema.\nvalue: 1\nPrimitive types\nA primitive value\nValues present in iceberg type\nPrimitive data types\nReserved Iceberg table properties list.\nRaw literal representation used for serde. The serialize …\nData and delete files were added and removed without …\nDefines schema in iceberg.\nSchema builder.\nType alias for schema id.\nReference to <code>Schema</code>.\nA post order schema visitor.\nPartition spec that defines how to produce a tuple of …\nReference to <code>SchemalessPartitionSpec</code>.\nA snapshot represents the state of a table at some time …\nA log of when each snapshot was made.\nReference to <code>Snapshot</code>.\nIceberg tables keep track of branches and tags using …\nThe snapshot expiration procedure removes snapshots from …\nSort direction in a partition, either ascending or …\nEntry for every column that is to be sorted\nA sort order is defined by a sort order id and a list of …\nBuilder for <code>SortOrder</code>.\nError type for SortOrderBuilder\nReference to <code>SortOrder</code>.\nThe SQL representation stores the view definition as a SQL …\nThe SQL representation stores the view definition as a SQL …\nArbitrary-length character sequences encoded in utf-8\nUTF-8 bytes (without length)\nThe partition struct stores the tuple of partition values …\nStruct type\nA struct is a tuple of typed values. Each field in the …\nDataType for a specific struct\nAn iterator that moves out of a struct.\nSummarises the changes in the snapshot.\nReturn type of this visitor.\nFields for the version 2 of the table metadata.\nManipulating table metadata.\nReference to <code>TableMetadata</code>.\nTags are labels for individual snapshots.\nTime of day in microsecond precision, without date or …\nTimestamp in microsecond precision, without timezone\nTimestamp in nanosecond precision, without timezone\nTimestamp in microsecond precision, with timezone\nTimestamp in nanosecond precision with timezone\nTransform is used to transform predicates to partition …\nValue truncated to width <code>W</code>\nAll data types are either primitives or nested types, …\nStored as 16-byte little-endian\nPlaceholder for sequence number. The field with this value …\nUnbound partition field can be built without a schema and …\nUnbound partition spec can be built without a schema and …\nCreate a new UnboundPartitionSpec\nReference to <code>UnboundPartitionSpec</code>.\nUninitialized field\nUninitialized field\nUsed to represent some customized transform that can’t …\nUniversally Unique Identifiers, should use 16-byte fixed\nIceberg spec version 1\nIceberg view spec version 1\nIceberg spec version 2\nCustom validation error\nCustom validation error\nIceberg format version\nFields for the version 1 of the view metadata.\nManipulating view metadata.\nReference to <code>ViewMetadata</code>.\nView definitions can be represented in multiple ways. …\nA list of view representations.\nA view versions represents the definition of a view at a …\nAlias for the integer type used for view version ids.\nA log of when each snapshot was made.\nReference to <code>ViewVersion</code>.\nAlways produces <code>null</code>\nExtract a date or timestamp year, as years from 1970\nGet an accessor for retrieving data in a struct\nAppend manifests to be written.\nAdd a new partition field to the partition spec from an …\nAdd a new partition field to the partition spec.\nAdd multiple partition fields to the partition spec.\nAdd a new partition field to the partition spec.\nWrapper around <code>with_unbound_fields</code> to add multiple …\nfield: 504\nfield: 512\nfield: 503\nCalled after list field.\nCalled after list field.\nCalled after map key field.\nCalled after map key field.\nCalled after map value field.\nCalled after map value field.\nCalled after struct field.\nCalled after struct field.\nAppend snapshot to table\nConvert Type to reference of PrimitiveType\nReturns [<code>r#struct</code>].\nChanges uuid of table metadata.\nChanges uuid of view metadata.\nCalled before list field.\nCalled before list field.\nCalled before map key field.\nCalled before map key field.\nCalled before map value field.\nCalled before map value field.\nCalled before struct field.\nCalled before struct field.\nCreates a binary literal from bytes.\nCreates a binary literal from bytes.\nBind this schemaless partition spec to a schema.\nBind this unbound partition spec to a schema.\nCreates a boolean value.\nCreates a boolean value.\nCreates a boolean value from string. See Parse bool from …\nCreates a boolean value from string. See Parse bool from …\nReturns the new table metadata after changes.\nReturns the new view metadata after changes.\nBuilds a new <code>DataFile</code>.\nBuild the unbound partition spec.\nBuild a bound partition spec with the given schema.\nBuilds the schema.\nCreates a new bound sort order.\nCreates a new unbound sort order.\nCreate a builder for building <code>ManifestMetadata</code>. On the …\nCreate a builder for building <code>ManifestEntry</code>. On the …\nCreate a builder for building <code>PartitionField</code>. On the …\nCreate partition spec builder\nCreate a builder for building <code>UnboundPartitionField</code>. On …\nCreate unbound partition spec builder\nCreate a schema builder.\nCreate a builder for building <code>Snapshot</code>. On the builder, …\nCreate a builder for building <code>SortField</code>. On the builder, …\nCreate sort order builder\nCreate a builder for building <code>ViewVersion</code>. On the builder, …\nWrite the manifest list to the output file.\nGet the column sizes. Map from column id to the total size …\nfield id: 108 key field id: 117 value field id: 118\nCheck whether literal is compatible with the type.\nTake ownership of the entries in the manifest list, …\nfield: 518 Whether the manifest contains at least one …\nfield: 509\nfield id: 134\nfield: 517\nContent type of this manifest entry.\nGet the content type of the data file (data, equality …\nGet current schema\nGet current schema\nGet current snapshot\nReturns the current view version.\nReturns the current version id.\nget a reference to the actual data file\nGet the primitive type from datum.\nCreates date literal from number of days from unix epoch …\nCreates date literal from number of days from unix epoch …\nCreates date literal in <code>%Y-%m-%d</code> format, assume in utc …\nCreates a date in <code>%Y-%m-%d</code> format, assume in utc timezone.\nCreate date literal from calendar date (year, month and …\nCreate a date from calendar date (year, month and day).\nCreates  decimal type.\nTry to create a decimal literal from <code>Decimal</code>.\nCreates a decimal literal.\nCreates decimal literal from string. See …\nCreates decimal literal from string. See …\nReturn max precision for decimal given [<code>num_bytes</code>] bytes.\nReturns minimum bytes required for decimal with [<code>precision</code>]…\nReturn the unique transform name to check if similar …\nGet the default catalog for this view version\nGet the default namespace to use when a reference in the …\nGet default partition spec\nReturns spec id of the “current” partition spec.\nReturns default sort order id.\nfield: 506\nfield: 514\nThe dialect of the sql SELECT statement (e.g., “trino” …\nA sort direction, that can only be either asc or desc\nFields may have an optional comment or doc string.\nCreates an 64bit floating point number.\nCreates an 32bit floating point number.\nElement field of list type.\nCreate a empty struct.\nEntries slice.\nGet the entries in the manifest list.\nGet the equality ids of the data file. Field ids used to …\nfield id: 135 element field id: 136\nfield: 505\nfield: 513\nCalled after struct’s field type visited.\nGet field by alias.\nGet struct field with certain id\nGet field by field id.\nGet struct field with certain field name\nGet field by field name.\nGet field by field name, but in case-insensitive way.\nA partition field id that is used to identify a partition …\nA partition field id that is used to identify a partition …\nGet field id by full name.\nDatatype\nGet fields.\nFields of the partition spec\nFields of the partition spec\nFields of the partition spec\nDetails of the sort\nFile format of this manifest entry.\nGet the file format of the file (avro, orc or parquet).\nfield id: 101\nData file path of this manifest entry.\nGet the file path as full URI with FS scheme\nfield id: 100\nFile size in bytes.\nGet the file size in bytes.\nfield id: 104\nCreates a fixed literal from bytes.\nCreates a fixed literal from bytes.\nCreates an 32bit floating point number.\nCreates an 32bit floating point number.\nReturns format version of this metadata.\nReturns format version of this metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new table metadata builder from the given table …\nCreates a new view metadata builder from the given view …\nReturns a reference to the value corresponding to the key. …\nThe order of map is matter, so this method used to compare …\nCheck if this partition spec has sequential partition ids. …\nGet the highest field id in the partition spec. If the …\nReturns [<code>highest_field_id</code>].\nReturns snapshot history.\nReturns view history.\nId unique in table schema\nReturns [<code>identifier_field_ids</code>].\nCreates a field id to field map.\nCreates a field id to parent field id map.\nUsed to populate the field’s value for all records that …\nInserts a key-value pair into the map. If the map did not …\nCreates an 32bit integer.\nCreates an 32bit integer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert Value to the any type\nCreate a new schema builder from a schema.\nConsume this Manifest, returning its constituent parts\nTurn this partition spec into a preserved partition spec.\nTo unbound partition field\nTurn this partition spec into an unbound partition spec.\nConvert to unbound partition spec\nCheck if this manifest entry is deleted.\nCheck if this partition spec is compatible with another …\nReturns true if the map contains no elements.\nCheck if there are no representations\nCheck if it’s float or double type.\nReturns true if the Literal represents a primitive type …\nReturns true if the Literal represents a primitive type …\nWhether the type is nested type.\nreturns true if the field at position <code>index</code> is null\nWhether the type is primitive type.\nWhether the type is struct type.\nReturns if the partition spec is unpartitioned.\nReturns true if the sort order is unsorted.\nCreate a iterator to read the field in order of …\nGet an iterator over the representations\nField for key.\nGet the Implementation-specific key metadata for the data …\nfield id: 131\nfield: 519\nReturns last sequence number.\nReturns last updated time in milliseconds.\nReturns last updated time.\nReturn the number of key-value pairs in the map.\nGet the number of representations\nCalled after list fields visited.\nConstruct list type’s element field.\nGet the primitive literal from datum.\nLoad <code>Manifest</code>.\nLoad manifest list.\nReturns table location.\nReturns view location.\nCreates an 64bit integer.\nCreates an 64bit integer.\nfield: 510 The minimum value for the field in the manifests\nGet the lower bounds of the data file values per column. …\nfield id: 125 key field id: 126 value field id: 127\nfield: 501\nGet location of manifest_list file\nfield: 500\nCalled after map’s key and value fields visited.\nConstruct map type’s key field.\nConstruct map type’s value field.\nThe file for the log.\nReturns the metadata log.\nfield: 516\nField Name\nA partition name.\nA partition name.\nGet field id by full name.\nGet the nan value counts of the data file. Map from column …\nfield id: 137 key field id: 138 value field id: 139\nCreate a new manifest writer.\nCreates a new table metadata builder from the given table …\nCreates a new view metadata builder from the given view …\nCreates a struct type with the given fields.\nConstruct a new field.\nConstruct a list type with the given element field.\nConstruct a map type with the given key and value fields.\nConstructor from <code>ManifestMetadata</code> and <code>ManifestEntry</code>s.\nCreate a new partition spec builder with the given schema.\nCreate a new partition spec builder with the given schema.\nCreate new snapshot reference\nCreates a new empty map.\nCreates a new view version log.\nCreate a new partition spec builder from an existing …\nA null order that describes the order of null values when …\nGet the null value counts of the data file. Map from …\nfield id: 110 key field id: 121 value field id: 122\nThe type of operation in the snapshot\nConstruct an optional field.\nIdentifier for SortOrder, order_id <code>0</code> is no sort order.\nOther summary data.\nGet parent snapshot id.\nParse from metadata in avro file.\nParse manifest from bytes of avro file.\nParse manifest list from bytes.\nGet the partition values of the file.\nfield id: 102\nLookup partition spec by id.\nfield: 502\nReturns all partition specs.\nReturns the partition type of this partition spec.\nReturns the partition type of this partition spec.\nfield: 507 element_field: 508\nWhether the transform preserves the order of values.\nCalled when see a primitive type.\nProjects a given predicate according to the transformation …\nReturns properties of table.\nReturns properties of the view.\nVisit a schema and returns only the fields selected by id …\nData file record count of the manifest entry.\nGet the record count in the data file.\nfield id: 103\nGet this views representations\nConstruct a required field.\nOptional or required\nGet the return type of transform given the input type. …\nSnapshot retention policy\nWhether ordering by this transform’s result satisfies …\nCalled after schema’s type visited.\nThe schema this partition spec is bound to\nGet the schema of this snapshot.\nGet the schema of this snapshot.\nLookup schema by id.\nLookup schema by id.\nReturns [<code>schema_id</code>].\nGet the schema id of this snapshot.\nGet the schema id of this view version.\nThe schema ref this partition spec is bound to\nReturns schemas\nReturns schemas\nData sequence number.\nGet sequence_number of the snapshot. Is 0 for Iceberg V1 …\nfield: 515\nLookup snapshot by id.\nGet the snapshot for a reference Returns an option if the …\nGet the id of the snapshot\nA reference’s snapshot ID. The tagged snapshot or latest …\nId of the snapshot.\nReturns all snapshots\nLookup sort order by id.\nGet the sort order id of the data file. Only data files …\nfield id: 140\nReturn all sort orders.\nA source column id from the table’s schema\nA source column id from the table’s schema\nA source column id from the table’s schema\nSpec id of the partition spec\nSpec id of the partition spec\nSpec id of the partition spec\nGet the split offsets of the data file. For example, all …\nfield id: 132 element field id: 133\nThe SQL SELECT statement that defines the view.\nStatus of this manifest entry\nCreates a string literal.\nCreates a string literal.\nCalled after struct’s fields visited.\nGet summary of the snapshot\nGet summary of the view version\nCreates time in microseconds directly\nCreates time literal from hour, minute, second, and …\nCreates time literal from hour, minute, second, and …\nCreates time literal in microseconds in <code>%H:%M:%S:.f</code> format.\nCreates time in microseconds in <code>%H:%M:%S:.f</code> format.\nCreates time literal in microseconds directly.\nGet the timestamp of when the snapshot was created\nReturns the last updated timestamp as a DateTime with …\nCreates a timestamp from unix epoch in microseconds.\nReturns the last updated timestamp as a DateTime with …\nGet the timestamp of when the view version was created\nCreates a timestamp from <code>DateTime</code>.\nCreates a timestamp from <code>DateTime</code>.\nParse a timestamp in [<code>%Y-%m-%dT%H:%M:%S%.f</code>] format.\nParse a timestamp in RFC3339 format.\nCreates a timestamp from unix epoch in microseconds.\nGet the timestamp of when the snapshot was created in …\nReturns the timestamp in milliseconds\nReturns the timestamp in milliseconds from epoch.\nGet the timestamp of when the view version was created in …\nTime new metadata was created\nLast updated timestamp\nCreates a timestamp from unix epoch in nanoseconds.\nCreates a timestamp with timezone from unix epoch in …\nCreates a timestamp with timezone from <code>DateTime</code>. Example:\nCreates a timestamp with timezone from <code>DateTime</code>.\nParse timestamp with timezone in RFC3339 format.\nSimilar to <code>Literal::timestamp_from_str</code>, but return …\nCreates a timestamp with timezone from unix epoch in …\nCreates a timestamp with timezone from unix epoch in …\nConvert the datum to <code>target_type</code>.\nConvert the value to bytes\nConvert Type to StructType\nA transform that is applied to the source column to …\nA transform that is applied to the source column to …\nA transform that is used to produce values to be sorted on …\nCovert literal to raw literal.\nCreate iceberg value from bytes.\nCreate iceberg value from a json value\nConvert raw literal to literal.\nConverting iceberg value to json value.\nGet a new unpatitioned partition spec\nGet a new unpatitioned partition spec\nCreate an unbound unsorted order\nfield: 511 The maximum value for the field in the manifests\nGet the upper bounds of the data file values per column. …\nfield id: 128 key field id: 129 value field id: 130\nReturns uuid of current table.\nCreates uuid literal.\nCreates uuid literal.\nReturns uuid of current view.\nCreates uuid from str. See <code>Uuid::parse_str</code>.\nCreates uuid from str. See <code>Uuid::parse_str</code>.\nConstruct a v1 <code>ManifestListWriter</code> that writes to a …\nConstruct a v2 <code>ManifestListWriter</code> that writes to a …\nGet the columns value counts for the data file. Map from …\nfield id: 109 key field id: 119 value field id: 120\nField for value.\nLookup a view version by id.\nReturns the version id.\nGet the version id of this view version.\nReturns all view versions.\nVisit schema in post order.\nVisit struct type in post order.\nVisiting a type in post order.\nSet alias to filed id mapping.\nSet the field’s doc.\nAdd fields to schema builder.\nDetails of the sort\nSet identifier field ids.\nSet the field’s initial default value.\nSet the last assigned field id for the partition spec.\nIdentifier for SortOrder, order_id <code>0</code> is no sort order.\nSet the order id for the sort order\nSet schema id.\nDetails of the sort\nChange the spec id of the partition spec\nSet the spec id for the partition spec.\nSet the spec id for the partition spec.\nSet the field’s initial default value.\nWrite a manifest.\nUsed to populate the field’s value for any records …\nPrecision, must be 38 or less\nScale\nFor snapshot references except the main branch, a positive …\nFor snapshot references except the main branch, a positive …\nA positive number for the max age of snapshots to keep …\nA positive number for the minimum number of snapshots to …\n<code>StaticTable</code> is a read-only table struct that can be …\nTable represents a table in the catalog.\nBuilder to create table scan.\nbuild the Table\nReturns a TableBuilder to build a table\noptionally set a non-default metadata cache size\nspecifies if the Table’s metadata cache will be disabled,\nrequired - sets the necessary FileIO to use for the table\nReturns file io used in this table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a static table from a given <code>TableMetadata</code> and …\nCreates a static table directly from metadata file and …\nrequired - passes in the TableIdent to use for the Table\nReturns table identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>StaticTable</code> and return it as a <code>Table</code> Please …\nrequired - passes in the TableMetadata to use for the Table\nReturns current metadata.\nGet TableMetadataRef for the static table\noptional - sets the tables metadata location\nReturns current metadata location.\nReturns current metadata ref.\nCreate a reader for the table.\nCreate a reader for the table.\nspecifies if the Table is readonly or not (default not)\nReturns the flag indicating whether the <code>Table</code> is readonly …\nCreates a table scan.\nCreate a TableScanBuilder for the static table.\nTransaction action for replacing sort order.\nTable transaction.\nFinished building the action and apply it to the …\nAdds a field for sorting in ascending order.\nCommit transaction.\nAdds a field for sorting in descending order.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new transaction.\nRemove properties in table.\nCreates replace sort order action.\nUpdate table’s property.\nSets table to a new version.\nBoxedTransformFunction is a boxed trait object of …\nTransformFunction is a trait that defines the interface …\ncreate_transform_function creates a boxed trait object of …\ntransform will take an input array and transform it into a …\ntransform_literal will take an input literal and transform …\nA thin wrapper around <code>transform_literal</code> to return an error …\nThe associated writer config type used to build the writer.\nThe current file status of iceberg writer. It implement …\nThe iceberg writer used to write data to iceberg table.\nThe builder for iceberg writer.\nThe associated writer type.\nBase writer module contains the basic writer provide by …\nBuild the iceberg writer.\nClose the writer and return the written data files. If …\nGet the current file path.\nGet the current file row number.\nGet the current file written size.\nThis module contains the writer for data file format …\nWrite data to iceberg table.\nThis module provide <code>DataFileWriter</code>.\nA writer write data is within one spec/partition.\nBuilder for <code>DataFileWriter</code>.\nConfig for <code>DataFileWriter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DataFileWriterConfig</code> with partition value.\nCreate a new <code>DataFileWriterBuilder</code> using a …\nFile writer focus on writing record batch to different …\nFile writer builder trait.\n`ParquetWriter`` is used to write arrow data into parquet …\nParquetWriterBuilder is used to builder a <code>ParquetWriter</code>\nThe associated file writer type.\nBuild file writer.\nClose file writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contains the location generator and file name …\nCreate a new <code>ParquetWriterBuilder</code> To construct the write …\nWrite record batch to file.\n<code>DefaultFileNameGenerator</code> used to generate file name for …\n<code>DefaultLocationGenerator</code> used to generate the data dir …\n<code>FileNameGeneratorTrait</code> used to generate file name for data …\n<code>LocationGenerator</code> used to generate the location of data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a file name.\nGenerate an absolute path for the given file name. e.g For …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DefaultLocationGenerator</code>.\nCreate a new <code>FileNameGenerator</code>.")