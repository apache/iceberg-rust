/*
 * Apache Iceberg REST Catalog API
 *
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TableUpdate {
    #[serde(rename = "action")]
    pub action: Action,
    #[serde(rename = "format-version")]
    pub format_version: i32,
    #[serde(rename = "schema")]
    pub schema: Box<crate::models::Schema>,
    /// Schema ID to set as current, or -1 to set last added schema
    #[serde(rename = "schema-id")]
    pub schema_id: i32,
    #[serde(rename = "spec")]
    pub spec: Box<crate::models::PartitionSpec>,
    /// Partition spec ID to set as the default, or -1 to set last added spec
    #[serde(rename = "spec-id")]
    pub spec_id: i32,
    #[serde(rename = "sort-order")]
    pub sort_order: Box<crate::models::SortOrder>,
    /// Sort order ID to set as the default, or -1 to set last added sort order
    #[serde(rename = "sort-order-id")]
    pub sort_order_id: i32,
    #[serde(rename = "snapshot")]
    pub snapshot: Box<crate::models::Snapshot>,
    #[serde(rename = "type")]
    pub r#type: RHashType,
    #[serde(rename = "snapshot-id")]
    pub snapshot_id: i64,
    #[serde(rename = "max-ref-age-ms", skip_serializing_if = "Option::is_none")]
    pub max_ref_age_ms: Option<i64>,
    #[serde(
        rename = "max-snapshot-age-ms",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_snapshot_age_ms: Option<i64>,
    #[serde(
        rename = "min-snapshots-to-keep",
        skip_serializing_if = "Option::is_none"
    )]
    pub min_snapshots_to_keep: Option<i32>,
    #[serde(rename = "ref-name")]
    pub ref_name: String,
    #[serde(rename = "snapshot-ids")]
    pub snapshot_ids: Vec<i64>,
    #[serde(rename = "location")]
    pub location: String,
    #[serde(rename = "updates")]
    pub updates: ::std::collections::HashMap<String, String>,
    #[serde(rename = "removals")]
    pub removals: Vec<String>,
}

impl TableUpdate {
    pub fn new(
        action: Action,
        format_version: i32,
        schema: crate::models::Schema,
        schema_id: i32,
        spec: crate::models::PartitionSpec,
        spec_id: i32,
        sort_order: crate::models::SortOrder,
        sort_order_id: i32,
        snapshot: crate::models::Snapshot,
        r#type: RHashType,
        snapshot_id: i64,
        ref_name: String,
        snapshot_ids: Vec<i64>,
        location: String,
        updates: ::std::collections::HashMap<String, String>,
        removals: Vec<String>,
    ) -> TableUpdate {
        TableUpdate {
            action,
            format_version,
            schema: Box::new(schema),
            schema_id,
            spec: Box::new(spec),
            spec_id,
            sort_order: Box::new(sort_order),
            sort_order_id,
            snapshot: Box::new(snapshot),
            r#type,
            snapshot_id,
            max_ref_age_ms: None,
            max_snapshot_age_ms: None,
            min_snapshots_to_keep: None,
            ref_name,
            snapshot_ids,
            location,
            updates,
            removals,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "upgrade-format-version")]
    UpgradeFormatVersion,
    #[serde(rename = "add-schema")]
    AddSchema,
    #[serde(rename = "set-current-schema")]
    SetCurrentSchema,
    #[serde(rename = "add-spec")]
    AddSpec,
    #[serde(rename = "set-default-spec")]
    SetDefaultSpec,
    #[serde(rename = "add-sort-order")]
    AddSortOrder,
    #[serde(rename = "set-default-sort-order")]
    SetDefaultSortOrder,
    #[serde(rename = "add-snapshot")]
    AddSnapshot,
    #[serde(rename = "set-snapshot-ref")]
    SetSnapshotRef,
    #[serde(rename = "remove-snapshots")]
    RemoveSnapshots,
    #[serde(rename = "remove-snapshot-ref")]
    RemoveSnapshotRef,
    #[serde(rename = "set-location")]
    SetLocation,
    #[serde(rename = "set-properties")]
    SetProperties,
    #[serde(rename = "remove-properties")]
    RemoveProperties,
}

impl Default for Action {
    fn default() -> Action {
        Self::UpgradeFormatVersion
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "tag")]
    Tag,
    #[serde(rename = "branch")]
    Branch,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Tag
    }
}
