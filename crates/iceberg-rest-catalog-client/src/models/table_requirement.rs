/*
 * Apache Iceberg REST Catalog API
 *
 * Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

/// TableRequirement : Assertions from the client that must be valid for the commit to succeed. Assertions are identified by `type` - - `assert-create` - the table must not already exist; used for create transactions - `assert-table-uuid` - the table UUID must match the requirement's `uuid` - `assert-ref-snapshot-id` - the table branch or tag identified by the requirement's `ref` must reference the requirement's `snapshot-id`; if `snapshot-id` is `null` or missing, the ref must not already exist - `assert-last-assigned-field-id` - the table's last assigned column id must match the requirement's `last-assigned-field-id` - `assert-current-schema-id` - the table's current schema id must match the requirement's `current-schema-id` - `assert-last-assigned-partition-id` - the table's last assigned partition id must match the requirement's `last-assigned-partition-id` - `assert-default-spec-id` - the table's default spec id must match the requirement's `default-spec-id` - `assert-default-sort-order-id` - the table's default sort order id must match the requirement's `default-sort-order-id`

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TableRequirement {
    #[serde(rename = "requirement")]
    pub requirement: Requirement,
    #[serde(rename = "ref", skip_serializing_if = "Option::is_none")]
    pub r#ref: Option<String>,
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    #[serde(rename = "snapshot-id", skip_serializing_if = "Option::is_none")]
    pub snapshot_id: Option<i64>,
    #[serde(
        rename = "last-assigned-field-id",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_assigned_field_id: Option<i32>,
    #[serde(rename = "current-schema-id", skip_serializing_if = "Option::is_none")]
    pub current_schema_id: Option<i32>,
    #[serde(
        rename = "last-assigned-partition-id",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_assigned_partition_id: Option<i32>,
    #[serde(rename = "default-spec-id", skip_serializing_if = "Option::is_none")]
    pub default_spec_id: Option<i32>,
    #[serde(
        rename = "default-sort-order-id",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_sort_order_id: Option<i32>,
}

impl TableRequirement {
    /// Assertions from the client that must be valid for the commit to succeed. Assertions are identified by `type` - - `assert-create` - the table must not already exist; used for create transactions - `assert-table-uuid` - the table UUID must match the requirement's `uuid` - `assert-ref-snapshot-id` - the table branch or tag identified by the requirement's `ref` must reference the requirement's `snapshot-id`; if `snapshot-id` is `null` or missing, the ref must not already exist - `assert-last-assigned-field-id` - the table's last assigned column id must match the requirement's `last-assigned-field-id` - `assert-current-schema-id` - the table's current schema id must match the requirement's `current-schema-id` - `assert-last-assigned-partition-id` - the table's last assigned partition id must match the requirement's `last-assigned-partition-id` - `assert-default-spec-id` - the table's default spec id must match the requirement's `default-spec-id` - `assert-default-sort-order-id` - the table's default sort order id must match the requirement's `default-sort-order-id`
    pub fn new(requirement: Requirement) -> TableRequirement {
        TableRequirement {
            requirement,
            r#ref: None,
            uuid: None,
            snapshot_id: None,
            last_assigned_field_id: None,
            current_schema_id: None,
            last_assigned_partition_id: None,
            default_spec_id: None,
            default_sort_order_id: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Requirement {
    #[serde(rename = "assert-create")]
    Create,
    #[serde(rename = "assert-table-uuid")]
    TableUuid,
    #[serde(rename = "assert-ref-snapshot-id")]
    RefSnapshotId,
    #[serde(rename = "assert-last-assigned-field-id")]
    LastAssignedFieldId,
    #[serde(rename = "assert-current-schema-id")]
    CurrentSchemaId,
    #[serde(rename = "assert-last-assigned-partition-id")]
    LastAssignedPartitionId,
    #[serde(rename = "assert-default-spec-id")]
    DefaultSpecId,
    #[serde(rename = "assert-default-sort-order-id")]
    DefaultSortOrderId,
}

impl Default for Requirement {
    fn default() -> Requirement {
        Self::Create
    }
}
